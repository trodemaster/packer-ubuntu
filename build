#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
shopt -s nullglob nocaseglob

# modern bash version check
! [ "${BASH_VERSINFO:-0}" -ge 4 ] && echo "This script requires bash v4 or later" && exit 1

# path to self and parent dir
SCRIPT=$(realpath $0)
SCRIPTPATH=$(dirname $SCRIPT)

# VARS
THING_1=1
# smart defaults..
# macos + arch = vmw host arch
# linux + arch = docker host arch
ARCH="amd64"
if [[ $(uname -m) == "x86_64" ]]; then
  ARCH="amd64"
  GUESTOS="ubuntu-64"
elif [[ $(uname -m) =~ (arm64|aarch64) ]]; then
  ARCH="arm64"
  GUESTOS="arm-ubuntu-64"
fi

# default build action
if [[ $(uname) =~ "Linux" ]];then
  packer build -force -only remote.docker.ubuntu -on-error abort -var cpu_arch=$ARCH .
elif [[ $(uname) =~ "Darwin" ]];then
   pkill vmx || true
   pkill Fusion || true
   #PACKER_LOG=1 packer build -force -only vmware-iso.ubuntu -var cpu_arch=$ARCH -var guest_os_type=$GUESTOS -on-error abort .
   PACKER_LOG=1 packer build -force -only qemu.ubuntu -var cpu_arch=$ARCH -var guest_os_type=$GUESTOS .
fi

exit 0

# print out usage
usage() {
  cat <<EOF
USAGE: ./build -v
OPTIONS:
   -v    vmw
   -d    docker
   -q    qemu
   -z    azure
   -a    aws
   -h    Help
EOF
  exit
}

# process options and arguments
while getopts "tbp:o:adh" OPTION; do
  case $OPTION in
  h) usage && exit 1 ;;
  p) INPUT_PATH=$OPTARG ;;
  o) OUTPUT_PATH=$OPTARG ;;
  t) THING_1=0 ;;
  d) HD_ARCHIVE=0 ;;
  b) BADPEG=0 ;;
  esac
done

thing_1() {
  echo "thing 1"
}

if [[ $THING_1 == 0 ]]; then
  thing_1
fi

#!/bin/bash

build pkrvariablesfilesname.pkrvars.hcl ?
build vmw arm
build qemu arm
build docker arm
build vmw amd64
build qemu amd64
build docker amd64
build azure amd64
build azure arm
build aws amd64
build aws arm

exit 0
